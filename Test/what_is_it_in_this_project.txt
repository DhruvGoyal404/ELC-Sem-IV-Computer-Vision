Here’s a project suggestion under Track 2 that meets your criteria—uses both MATLAB & Python, involves measurable metrics (precision, recall, accuracy), is “good level” yet quick to implement, and lets you reuse similar code in both environments:

Project Proposal: Real-Time Color-Based Object Detection & Counting
Why This Project?
Dual-language workflow: Prototype and demo in MATLAB (using its Image Acquisition and Image Processing toolboxes) and then port the same logic to Python + OpenCV, so you get hands-on experience with both ecosystems 
MATLAB Central Blogs
.

Metrics-friendly: You can label a short test video manually (e.g., bounding boxes around colored objects) and compute precision, recall, and accuracy by comparing your detector’s output to the ground truth 
Learn R, Python & Data Science Online
.

Simplicity & speed: Color segmentation (e.g., detecting red balls or blue markers) is one of the easiest real-time CV tasks and can run at ≥ 30 FPS on modest hardware, letting you finish a working demo in days, not weeks 
GeeksforGeeks
.

Scalability: Once the pipeline’s in place, you can extend to count multiple object types (e.g., red vs. green) or track motion paths—bonus features that earn extra creativity points without huge extra effort 
ProjectPro
.

Toolchain & Setup
MATLAB (R2022a):

Use the Image Acquisition Toolbox for webcam capture and the Image Processing Toolbox for color thresholding and blob analysis 
MathWorks - Maker of MATLAB and Simulink
.

MATLAB’s interactive apps (e.g., Color Thresholder) speed up prototyping 
MathWorks - Maker of MATLAB and Simulink
.

Python 3.x + OpenCV:

Replicate MATLAB steps: capture frames with cv2.VideoCapture, convert to HSV, apply cv2.inRange for your target color, find contours, and draw bounding boxes.

Optionally integrate with TensorFlow/Keras later for more advanced classification, but that’s optional.

Implementation Roadmap
Data Collection (Day 1)

Record a short (1–2 min) webcam video of your target object moving in front of a static background.

Label ~100–200 frames with bounding boxes (any simple tool or manual CSV).

MATLAB Prototype (Day 2–3)

Load your video via VideoReader, extract frames.

Use Color Thresholder to pick HSV ranges.

Apply regionprops to detect blobs and draw bounding boxes.

Track counts frame-by-frame and log detections vs. ground truth.

Python Port (Day 3–4)

Read video using cv2.VideoCapture.

Convert to HSV space with cv2.cvtColor.

Threshold with cv2.inRange, find contours via cv2.findContours.

Draw bounding boxes with cv2.rectangle and display in real time.

Performance Evaluation (Day 4)

Compare your detection bounding boxes to your manual labels to compute:

Precision = TP / (TP + FP)

Recall = TP / (TP + FN)

Accuracy = (TP + TN) / (TP + FP + TN + FN) 
Learn R, Python & Data Science Online
.

Measure FPS (frames per second) to ensure real-time performance 
GeeksforGeeks
.

Extension Ideas (Day 5, optional)

Multi-color detection (e.g., red vs. green) and classification.

Movement tracking: draw trajectories or count crossing events.

Simple GUI in MATLAB or Python (Tkinter) for parameter tuning.

Why This Fits Your Constraints
Time-efficient: Core color segmentation pipeline is trivial to code and debug—expect a working demo in ~4 days on a standard laptop (8 GB RAM).

MATLAB + Python: You’ll produce two versions of essentially the same algorithm, fulfilling the dual-language requirement.

Metrics-rich: Easily compute and report precision/recall/accuracy on a small annotated sample to satisfy your deliverable requirements.

Low hardware demands: No deep-learning GPU needed; runs in pure CPU mode at real-time speeds 
MathWorks - Maker of MATLAB and Simulink
.

Let me know if this sounds good! Once you confirm, we can jump into Day 1: recording the video, choosing a target object/color, and setting up your MATLAB environment.

1. Video Capture
You start by grabbing frames from your webcam (or video feed) continuously.

In MATLAB, you use videoinput from the Image Acquisition Toolbox to connect to the camera and getsnapshot or a frame‐acquisition loop to fetch images in real time 
MathWorks - Maker of MATLAB and Simulink
.

In Python, you use cv2.VideoCapture(0) and loop over cap.read() to retrieve each frame 
Stack Overflow
.

2. Color Space Conversion
Raw camera images are in BGR (Python) or RGB (MATLAB) by default; but to segment by color robustly, you convert to the HSV (hue-saturation-value) space, where “hue” directly encodes the color type.

OpenCV’s cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) performs this conversion in Python 
OpenCV Docs
.

MATLAB’s rgb2hsv function does the same conversion on an RGB matrix 
MathWorks - Maker of MATLAB and Simulink
.

3. Color Thresholding
Next, you define a lower and upper HSV bound for your target color (e.g., red objects). Every pixel within this range becomes white (1) in a binary mask, and everything else becomes black (0).

In Python: mask = cv2.inRange(hsv_frame, lower_bound, upper_bound) 
OpenCV Docs
.

In MATLAB: use the Color Thresholder app or code mask = (hsv(:,:,1)>=hmin & hsv(:,:,1)<=hmax) & … across S and V channels 
MathWorks - Maker of MATLAB and Simulink
.

4. Blob Detection
With the binary mask, you identify connected regions (“blobs”) representing individual objects.

MATLAB: regionprops returns properties (area, centroid, bounding box) for each blob in the mask 
MathWorks - Maker of MATLAB and Simulink
.

Python: contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) finds each blob’s contour 
Stack Overflow
.

5. Bounding Boxes & Counting
For every detected blob/contour, you compute and draw its bounding box on the original frame, then increment your object count.

In MATLAB: use the .BoundingBox property from regionprops and rectangle('Position', …) to overlay boxes.

In Python: loop contours and use x, y, w, h = cv2.boundingRect(cnt) then cv2.rectangle(frame, (x, y), (x+w, y+h), ...) 
OpenCV Docs
.

6. Real-Time Display & FPS Measurement
You display each processed frame to the user and measure how fast your loop runs (frames per second).

FPS in Python: record timestamps before/after processing a frame and compute 1 / (end_time - start_time) 
GeeksforGeeks
.

MATLAB: use tic/toc around your processing code and average over frames.

7. Performance Evaluation (Precision, Recall, Accuracy)
To quantify detection quality, you compare your algorithm’s bounding boxes to a ground-truth annotation set drawn on a sample of frames. From this you compute:

True Positives (TP): correctly detected objects

False Positives (FP): detections with no matching ground truth

False Negatives (FN): ground-truth objects missed by your detector

Then:

Precision = TP / (TP + FP)

Recall = TP / (TP + FN)

Accuracy = (TP + TN) / (TP + FP + TN + FN) 
Medium
.

Optionally plot a Precision–Recall curve or compute mAP following standard object-detection tutorials 
DigitalOcean
Label Your Data
.

8. Dual-Language Porting
You first prototype quickly in MATLAB (leveraging its GUI apps for rapid HSV-range selection) and confirm your logic, then translate the same steps to Python code line-by-line. This not only satisfies the requirement of using both languages but reinforces how core CV concepts map between environments 
MathWorks - Maker of MATLAB and Simulink
Stack Overflow
.

Step 1: Open Your Command Prompt (Terminal)
Find and open the “Command Prompt” on Windows (or “Terminal” on Mac/Linux).

You should see a black (or dark) window with a prompt like C:\Users\You> or you@machine:~$.

Type this exactly, then press Enter:

css
Copy
Edit
python --version
It should reply with something like Python 3.x.x. That means Python is installed!

If it says “command not found,” let me know, and we’ll install Python first.

Step 2: Open MATLAB
Click your MATLAB icon on your desktop or in your Start menu.

Wait a moment until the MATLAB window appears: it looks like a white background with a big prompt that says >>.

That’s it—MATLAB is open and ready.

Step 3: Record a Short Video of Your Target Object
We need a little video so our program can practice detecting something. Let’s pick a simple, solid-colored object—like a red ball, green toy car, or blue water bottle.

Grab your colored object.

Use your phone or webcam to record yourself moving that object slowly in front of a plain background (e.g., a white wall).

Make the video about 30 seconds to 1 minute long.

Save the video file somewhere easy to find—like your Desktop or a folder named ELC_Project.

Think of it as making your own “movie” of that red ball dancing in front of you. We’ll teach the computer to watch that movie and say, “Hey—I see the red ball here, here, here!”

Step 4: Create a Project Folder
On your Desktop, make a new folder called ColorDetectELC.

Put your video file inside that folder.

Inside that folder, create two more folders:

MATLAB

Python

It should look like this:

markdown
Copy
Edit
Desktop/
└── ColorDetectELC/
    ├── my_video.mp4
    ├── MATLAB/
    └── Python/
We’ll keep the MATLAB code in one place and the Python code in the other.

Step 5: First MATLAB Test
In MATLAB’s prompt (>>), change directory to that folder by typing:

matlab
Copy
Edit
cd('C:\Users\You\Desktop\ColorDetectELC\MATLAB')
Replace the path if your username or folder is different.

Load your video into MATLAB:

matlab
Copy
Edit
vid = VideoReader('../my_video.mp4');
frame = readFrame(vid);
imshow(frame);
You should see the first frame of your video pop up.

If yes—great! MATLAB can read your video.


